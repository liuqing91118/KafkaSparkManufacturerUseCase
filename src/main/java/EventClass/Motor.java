package EventClass;

import java.io.Serializable;

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Motor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, Serializable {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Motor\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"motorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"temp\",\"type\":\"double\"},{\"name\":\"vibration\",\"type\":\"double\"},{\"name\":\"conveyorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    @Deprecated public long timestamp;
    @Deprecated public java.lang.String motorId;
    @Deprecated public double speed;
    @Deprecated public double temp;
    @Deprecated public double vibration;
    @Deprecated public java.lang.String conveyorId;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Motor() {}

    /**
     * All-args constructor.
     */
    public Motor(java.lang.Long timestamp, java.lang.String motorId, java.lang.Double speed, java.lang.Double temp, java.lang.Double vibration, java.lang.String conveyorId) {
        this.timestamp = timestamp;
        this.motorId = motorId;
        this.speed = speed;
        this.temp = temp;
        this.vibration = vibration;
        this.conveyorId = conveyorId;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return timestamp;
            case 1: return motorId;
            case 2: return speed;
            case 3: return temp;
            case 4: return vibration;
            case 5: return conveyorId;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: timestamp = (java.lang.Long)value$; break;
            case 1: motorId = (java.lang.String)value$; break;
            case 2: speed = (java.lang.Double)value$; break;
            case 3: temp = (java.lang.Double)value$; break;
            case 4: vibration = (java.lang.Double)value$; break;
            case 5: conveyorId = (java.lang.String)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'timestamp' field.
     */
    public java.lang.Long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.Long value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the 'motorId' field.
     */
    public java.lang.String getMotorId() {
        return motorId;
    }

    /**
     * Sets the value of the 'motorId' field.
     * @param value the value to set.
     */
    public void setMotorId(java.lang.String value) {
        this.motorId = value;
    }

    /**
     * Gets the value of the 'speed' field.
     */
    public java.lang.Double getSpeed() {
        return speed;
    }

    /**
     * Sets the value of the 'speed' field.
     * @param value the value to set.
     */
    public void setSpeed(java.lang.Double value) {
        this.speed = value;
    }

    /**
     * Gets the value of the 'temp' field.
     */
    public java.lang.Double getTemp() {
        return temp;
    }

    /**
     * Sets the value of the 'temp' field.
     * @param value the value to set.
     */
    public void setTemp(java.lang.Double value) {
        this.temp = value;
    }

    /**
     * Gets the value of the 'vibration' field.
     */
    public java.lang.Double getVibration() {
        return vibration;
    }

    /**
     * Sets the value of the 'vibration' field.
     * @param value the value to set.
     */
    public void setVibration(java.lang.Double value) {
        this.vibration = value;
    }

    /**
     * Gets the value of the 'conveyorId' field.
     */
    public java.lang.String getConveyorId() {
        return conveyorId;
    }

    /**
     * Sets the value of the 'conveyorId' field.
     * @param value the value to set.
     */
    public void setConveyorId(java.lang.String value) {
        this.conveyorId = value;
    }

    /** Creates a new Motor RecordBuilder */
    public static Motor.Builder newBuilder() {
        return new Motor.Builder();
    }

    /** Creates a new Motor RecordBuilder by copying an existing Builder */
    public static Motor.Builder newBuilder(Motor.Builder other) {
        return new Motor.Builder(other);
    }

    /** Creates a new Motor RecordBuilder by copying an existing Motor instance */
    public static Motor.Builder newBuilder(Motor other) {
        return new Motor.Builder(other);
    }

    /**
     * RecordBuilder for Motor instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Motor>
            implements org.apache.avro.data.RecordBuilder<Motor> {

        private long timestamp;
        private java.lang.String motorId;
        private double speed;
        private double temp;
        private double vibration;
        private java.lang.String conveyorId;

        /** Creates a new Builder */
        private Builder() {
            super(Motor.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(Motor.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.motorId)) {
                this.motorId = data().deepCopy(fields()[1].schema(), other.motorId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.speed)) {
                this.speed = data().deepCopy(fields()[2].schema(), other.speed);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.temp)) {
                this.temp = data().deepCopy(fields()[3].schema(), other.temp);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.vibration)) {
                this.vibration = data().deepCopy(fields()[4].schema(), other.vibration);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.conveyorId)) {
                this.conveyorId = data().deepCopy(fields()[5].schema(), other.conveyorId);
                fieldSetFlags()[5] = true;
            }
        }

        /** Creates a Builder by copying an existing Motor instance */
        private Builder(Motor other) {
            super(Motor.SCHEMA$);
            if (isValidValue(fields()[0], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.motorId)) {
                this.motorId = data().deepCopy(fields()[1].schema(), other.motorId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.speed)) {
                this.speed = data().deepCopy(fields()[2].schema(), other.speed);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.temp)) {
                this.temp = data().deepCopy(fields()[3].schema(), other.temp);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.vibration)) {
                this.vibration = data().deepCopy(fields()[4].schema(), other.vibration);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.conveyorId)) {
                this.conveyorId = data().deepCopy(fields()[5].schema(), other.conveyorId);
                fieldSetFlags()[5] = true;
            }
        }

        /** Gets the value of the 'timestamp' field */
        public java.lang.Long getTimestamp() {
            return timestamp;
        }

        /** Sets the value of the 'timestamp' field */
        public Motor.Builder setTimestamp(long value) {
            validate(fields()[0], value);
            this.timestamp = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'timestamp' field has been set */
        public boolean hasTimestamp() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'timestamp' field */
        public Motor.Builder clearTimestamp() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'motorId' field */
        public java.lang.String getMotorId() {
            return motorId;
        }

        /** Sets the value of the 'motorId' field */
        public Motor.Builder setMotorId(java.lang.String value) {
            validate(fields()[1], value);
            this.motorId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'motorId' field has been set */
        public boolean hasMotorId() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'motorId' field */
        public Motor.Builder clearMotorId() {
            motorId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'speed' field */
        public java.lang.Double getSpeed() {
            return speed;
        }

        /** Sets the value of the 'speed' field */
        public Motor.Builder setSpeed(double value) {
            validate(fields()[2], value);
            this.speed = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'speed' field has been set */
        public boolean hasSpeed() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'speed' field */
        public Motor.Builder clearSpeed() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'temp' field */
        public java.lang.Double getTemp() {
            return temp;
        }

        /** Sets the value of the 'temp' field */
        public Motor.Builder setTemp(double value) {
            validate(fields()[3], value);
            this.temp = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'temp' field has been set */
        public boolean hasTemp() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'temp' field */
        public Motor.Builder clearTemp() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /** Gets the value of the 'vibration' field */
        public java.lang.Double getVibration() {
            return vibration;
        }

        /** Sets the value of the 'vibration' field */
        public Motor.Builder setVibration(double value) {
            validate(fields()[4], value);
            this.vibration = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /** Checks whether the 'vibration' field has been set */
        public boolean hasVibration() {
            return fieldSetFlags()[4];
        }

        /** Clears the value of the 'vibration' field */
        public Motor.Builder clearVibration() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /** Gets the value of the 'conveyorId' field */
        public java.lang.String getConveyorId() {
            return conveyorId;
        }

        /** Sets the value of the 'conveyorId' field */
        public Motor.Builder setConveyorId(java.lang.String value) {
            validate(fields()[5], value);
            this.conveyorId = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /** Checks whether the 'conveyorId' field has been set */
        public boolean hasConveyorId() {
            return fieldSetFlags()[5];
        }

        /** Clears the value of the 'conveyorId' field */
        public Motor.Builder clearConveyorId() {
            conveyorId = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        public Motor build() {
            try {
                Motor record = new Motor();
                record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
                record.motorId = fieldSetFlags()[1] ? this.motorId : (java.lang.String) defaultValue(fields()[1]);
                record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Double) defaultValue(fields()[2]);
                record.temp = fieldSetFlags()[3] ? this.temp : (java.lang.Double) defaultValue(fields()[3]);
                record.vibration = fieldSetFlags()[4] ? this.vibration : (java.lang.Double) defaultValue(fields()[4]);
                record.conveyorId = fieldSetFlags()[5] ? this.conveyorId : (java.lang.String) defaultValue(fields()[5]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @Override
    public String toString() {
        return "Motor:{" +
                "timestamp=" + timestamp +
                ", motorId='" + motorId + '\'' +
                ", speed=" + speed +
                ", temp=" + temp +
                ", vibration=" + vibration +
                ", conveyorId='" + conveyorId + '\'' +
                '}';
    }
}

