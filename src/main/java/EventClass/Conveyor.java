package EventClass;

import java.io.Serializable;

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Conveyor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, Serializable {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventClass.Conveyor\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"conveyorId\",\"type\":\"string\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"vibration\",\"type\":\"double\"},{\"name\":\"load\",\"type\":\"double\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    @Deprecated public long timestamp;
    @Deprecated public String conveyorId;
    @Deprecated public double speed;
    @Deprecated public double vibration;
    @Deprecated public double load;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Conveyor() {}

    /**
     * All-args constructor.
     */
    public Conveyor(java.lang.Long timestamp, String conveyorId, java.lang.Double speed, java.lang.Double vibration, java.lang.Double load) {
        this.timestamp = timestamp;
        this.conveyorId = conveyorId;
        this.speed = speed;
        this.vibration = vibration;
        this.load = load;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return timestamp;
            case 1: return conveyorId;
            case 2: return speed;
            case 3: return vibration;
            case 4: return load;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: timestamp = (java.lang.Long)value$; break;
            case 1: conveyorId = (String)value$; break;
            case 2: speed = (java.lang.Double)value$; break;
            case 3: vibration = (java.lang.Double)value$; break;
            case 4: load = (java.lang.Double)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'timestamp' field.
     */
    public java.lang.Long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.Long value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the 'conveyorId' field.
     */
    public String getConveyorId() {
        return conveyorId;
    }

    /**
     * Sets the value of the 'conveyorId' field.
     * @param value the value to set.
     */
    public void setConveyorId(String value) {
        this.conveyorId = value;
    }

    /**
     * Gets the value of the 'speed' field.
     */
    public java.lang.Double getSpeed() {
        return speed;
    }

    /**
     * Sets the value of the 'speed' field.
     * @param value the value to set.
     */
    public void setSpeed(java.lang.Double value) {
        this.speed = value;
    }

    /**
     * Gets the value of the 'vibration' field.
     */
    public java.lang.Double getVibration() {
        return vibration;
    }

    /**
     * Sets the value of the 'vibration' field.
     * @param value the value to set.
     */
    public void setVibration(java.lang.Double value) {
        this.vibration = value;
    }

    /**
     * Gets the value of the 'load' field.
     */
    public java.lang.Double getLoad() {
        return load;
    }

    /**
     * Sets the value of the 'load' field.
     * @param value the value to set.
     */
    public void setLoad(java.lang.Double value) {
        this.load = value;
    }

    /** Creates a new EventClass.Conveyor RecordBuilder */
    public static Conveyor.Builder newBuilder() {
        return new Conveyor.Builder();
    }

    /** Creates a new EventClass.Conveyor RecordBuilder by copying an existing Builder */
    public static Conveyor.Builder newBuilder(Conveyor.Builder other) {
        return new Conveyor.Builder(other);
    }

    /** Creates a new EventClass.Conveyor RecordBuilder by copying an existing EventClass.Conveyor instance */
    public static Conveyor.Builder newBuilder(Conveyor other) {
        return new Conveyor.Builder(other);
    }

    /**
     * RecordBuilder for EventClass.Conveyor instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Conveyor>
            implements org.apache.avro.data.RecordBuilder<Conveyor> {

        private long timestamp;
        private String conveyorId;
        private double speed;
        private double vibration;
        private double load;

        /** Creates a new Builder */
        private Builder() {
            super(Conveyor.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(Conveyor.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.conveyorId)) {
                this.conveyorId = data().deepCopy(fields()[1].schema(), other.conveyorId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.speed)) {
                this.speed = data().deepCopy(fields()[2].schema(), other.speed);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.vibration)) {
                this.vibration = data().deepCopy(fields()[3].schema(), other.vibration);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.load)) {
                this.load = data().deepCopy(fields()[4].schema(), other.load);
                fieldSetFlags()[4] = true;
            }
        }

        /** Creates a Builder by copying an existing EventClass.Conveyor instance */
        private Builder(Conveyor other) {
            super(Conveyor.SCHEMA$);
            if (isValidValue(fields()[0], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.conveyorId)) {
                this.conveyorId = data().deepCopy(fields()[1].schema(), other.conveyorId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.speed)) {
                this.speed = data().deepCopy(fields()[2].schema(), other.speed);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.vibration)) {
                this.vibration = data().deepCopy(fields()[3].schema(), other.vibration);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.load)) {
                this.load = data().deepCopy(fields()[4].schema(), other.load);
                fieldSetFlags()[4] = true;
            }
        }

        /** Gets the value of the 'timestamp' field */
        public java.lang.Long getTimestamp() {
            return timestamp;
        }

        /** Sets the value of the 'timestamp' field */
        public Conveyor.Builder setTimestamp(long value) {
            validate(fields()[0], value);
            this.timestamp = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'timestamp' field has been set */
        public boolean hasTimestamp() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'timestamp' field */
        public Conveyor.Builder clearTimestamp() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'conveyorId' field */
        public String getConveyorId() {
            return conveyorId;
        }

        /** Sets the value of the 'conveyorId' field */
        public Conveyor.Builder setConveyorId(String value) {
            validate(fields()[1], value);
            this.conveyorId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'conveyorId' field has been set */
        public boolean hasConveyorId() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'conveyorId' field */
        public Conveyor.Builder clearConveyorId() {
            conveyorId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'speed' field */
        public java.lang.Double getSpeed() {
            return speed;
        }

        /** Sets the value of the 'speed' field */
        public Conveyor.Builder setSpeed(double value) {
            validate(fields()[2], value);
            this.speed = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'speed' field has been set */
        public boolean hasSpeed() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'speed' field */
        public Conveyor.Builder clearSpeed() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'vibration' field */
        public java.lang.Double getVibration() {
            return vibration;
        }

        /** Sets the value of the 'vibration' field */
        public Conveyor.Builder setVibration(double value) {
            validate(fields()[3], value);
            this.vibration = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'vibration' field has been set */
        public boolean hasVibration() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'vibration' field */
        public Conveyor.Builder clearVibration() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /** Gets the value of the 'load' field */
        public java.lang.Double getLoad() {
            return load;
        }

        /** Sets the value of the 'load' field */
        public Conveyor.Builder setLoad(double value) {
            validate(fields()[4], value);
            this.load = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /** Checks whether the 'load' field has been set */
        public boolean hasLoad() {
            return fieldSetFlags()[4];
        }

        /** Clears the value of the 'load' field */
        public Conveyor.Builder clearLoad() {
            fieldSetFlags()[4] = false;
            return this;
        }

        @Override
        public Conveyor build() {
            try {
                Conveyor record = new Conveyor();
                record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
                record.conveyorId = fieldSetFlags()[1] ? this.conveyorId : (String) defaultValue(fields()[1]);
                record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Double) defaultValue(fields()[2]);
                record.vibration = fieldSetFlags()[3] ? this.vibration : (java.lang.Double) defaultValue(fields()[3]);
                record.load = fieldSetFlags()[4] ? this.load : (java.lang.Double) defaultValue(fields()[4]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }

        @Override
        public String toString() {
            return "Conveyor{" +
                    "timestamp=" + timestamp +
                    ", conveyorId=" + conveyorId +
                    ", speed=" + speed +
                    ", vibration=" + vibration +
                    ", load=" + load +
                    '}';
        }
    }
}

